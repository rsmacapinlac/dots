#!/bin/bash

# Kimai timesheet management script
# This script provides a comprehensive interface to the self-hosted Kimai service

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
KIMAI_URL="https://time.macapinlac.network"
PASS_KEY="keys/kimai"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if required tools are installed
check_dependencies() {
    if ! command -v curl &> /dev/null; then
        print_error "curl is not installed. Please install it first."
        exit 1
    fi
    
    if ! command -v pass &> /dev/null; then
        print_error "pass is not installed. Please install it first."
        exit 1
    fi
}

# Function to get authentication token from pass
get_auth_token() {
    if ! pass show "$PASS_KEY" &> /dev/null; then
        print_error "Authentication key not found in pass at '$PASS_KEY'"
        print_error "Please add your Kimai API token to pass:"
        echo "  pass insert $PASS_KEY"
        exit 1
    fi
    
    pass show "$PASS_KEY"
}

# Function to show usage
show_usage() {
    echo "Usage: $0 <command> [options]"
    echo ""
    echo "Commands:"
    echo "  start                 Start a new timesheet"
    echo "  end                   Stop an existing timesheet"
    echo "  list                  List active timesheets"
    echo "  projects              List available projects"
    echo "  activities            List available activities"
    echo "  status                Show current status"
    echo "  help                  Show this help message"
    echo ""
    echo "Start timesheet:"
    echo "  $0 start --project-id <id> --activity-id <id> [options]"
    echo "  Options:"
    echo "    --description <text>  Description for the timesheet"
    echo "    --tags <tags>         Comma-separated tags"
    echo "    --billable            Mark timesheet as billable (default: true)"
    echo "    --exported            Mark timesheet as exported (default: false)"
    echo ""
    echo "Stop timesheet:"
    echo "  $0 end --timesheet-id <id>"
    echo ""
    echo "Examples:"
    echo "  $0 start --project-id 5 --activity-id 3"
    echo "  $0 start --project-id 5 --activity-id 3 --description 'Working on feature X'"
    echo "  $0 end --timesheet-id 5"
    echo "  $0 list"
    echo "  $0 projects"
    echo "  $0 activities"
}

# Function to start timesheet
start_timesheet() {
    local auth_token="$1"
    local project_id="$2"
    local activity_id="$3"
    local description="$4"
    local tags="$5"
    local billable="$6"
    local exported="$7"
    
    local current_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
    
    print_status "Starting timesheet..."
    print_status "Project ID: $project_id"
    print_status "Activity ID: $activity_id"
    if [ -n "$description" ]; then
        print_status "Description: $description"
    fi
    if [ -n "$tags" ]; then
        print_status "Tags: $tags"
    fi
    
    # Build JSON payload
    local json_payload="{
        \"begin\": \"$current_time\",
        \"end\": \"$current_time\",
        \"project\": $project_id,
        \"activity\": $activity_id,
        \"billable\": $billable,
        \"exported\": $exported"
    
    if [ -n "$description" ]; then
        json_payload="$json_payload,
        \"description\": \"$description\""
    fi
    
    if [ -n "$tags" ]; then
        json_payload="$json_payload,
        \"tags\": \"$tags\""
    fi
    
    json_payload="$json_payload
    }"
    
    # Make API request
    local response=$(curl --silent --show-error \
        --request POST \
        --url "$KIMAI_URL/api/timesheets" \
        --header "Accept: application/json" \
        --header "Authorization: Bearer $auth_token" \
        --header "Content-Type: application/json" \
        --data "$json_payload" \
        2>&1)
    
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        # Try to extract timesheet ID from response
        local timesheet_id=$(echo "$response" | grep -o '"id":[0-9]*' | head -1 | cut -d':' -f2)
        
        if [ -n "$timesheet_id" ]; then
            print_success "Timesheet started successfully with ID: $timesheet_id"
            print_status "Started at: $current_time"
        else
            print_success "Timesheet started successfully"
            print_status "Response: $response"
        fi
    else
        print_error "Failed to start timesheet"
        print_error "curl error: $response"
        exit 1
    fi
}

# Function to stop timesheet
stop_timesheet() {
    local auth_token="$1"
    local timesheet_id="$2"
    
    print_status "Stopping timesheet ID: $timesheet_id"
    
    # Make API request
    local response=$(curl --silent --show-error \
        --request PATCH \
        --url "$KIMAI_URL/api/timesheets/$timesheet_id/stop" \
        --header "Authorization: Bearer $auth_token" \
        --header "Content-Type: application/json" \
        2>&1)
    
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        # Try to extract end time from response
        local end_time=$(echo "$response" | grep -o '"end":"[^"]*"' | head -1 | cut -d'"' -f4)
        
        if [ -n "$end_time" ]; then
            print_success "Timesheet stopped successfully"
            print_status "Ended at: $end_time"
        else
            print_success "Timesheet stopped successfully"
            if [ -n "$response" ]; then
                print_status "Response: $response"
            fi
        fi
    else
        print_error "Failed to stop timesheet"
        print_error "curl error: $response"
        exit 1
    fi
}

# Function to list active timesheets
list_active_timesheets() {
    local auth_token="$1"
    
    print_status "Fetching active timesheets..."
    
    local response=$(curl --silent --show-error \
        --request GET \
        --url "$KIMAI_URL/api/timesheets?active=1" \
        --header "Accept: application/json" \
        --header "Authorization: Bearer $auth_token" \
        2>&1)
    
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        # Try to extract timesheet information
        local timesheet_count=$(echo "$response" | grep -o '"id":[0-9]*' | wc -l)
        
        if [ "$timesheet_count" -gt 0 ]; then
            print_status "Found $timesheet_count active timesheet(s):"
            echo ""
            
            # Extract and display timesheet details
            echo "$response" | grep -o '"id":[0-9]*' | while read -r line; do
                local id=$(echo "$line" | cut -d':' -f2)
                local project=$(echo "$response" | grep -A 10 "\"id\":$id" | grep '"project":' | head -1 | cut -d':' -f2 | tr -d ' ,')
                local activity=$(echo "$response" | grep -A 10 "\"id\":$id" | grep '"activity":' | head -1 | cut -d':' -f2 | tr -d ' ,')
                local begin=$(echo "$response" | grep -A 10 "\"id\":$id" | grep '"begin":' | head -1 | cut -d'"' -f4)
                local description=$(echo "$response" | grep -A 10 "\"id\":$id" | grep '"description":' | head -1 | cut -d'"' -f4)
                
                echo "  ID: $id"
                if [ -n "$project" ]; then
                    echo "    Project: $project"
                fi
                if [ -n "$activity" ]; then
                    echo "    Activity: $activity"
                fi
                if [ -n "$begin" ]; then
                    echo "    Started: $begin"
                fi
                if [ -n "$description" ]; then
                    echo "    Description: $description"
                fi
                echo ""
            done
        else
            print_warning "No active timesheets found"
        fi
    else
        print_error "Failed to fetch active timesheets"
        print_error "curl error: $response"
        exit 1
    fi
}

# Function to list projects
list_projects() {
    local auth_token="$1"
    
    print_status "Fetching projects..."
    
    local response=$(curl --silent --show-error \
        --request GET \
        --url "$KIMAI_URL/api/projects" \
        --header "Accept: application/json" \
        --header "Authorization: Bearer $auth_token" \
        2>&1)
    
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        # Try to extract project information
        local project_count=$(echo "$response" | grep -o '"id":[0-9]*' | wc -l)
        
        if [ "$project_count" -gt 0 ]; then
            print_status "Found $project_count project(s):"
            echo ""
            
            # Extract and display project details using better parsing
            echo "$response" | grep -o '"id":[0-9]*' | while read -r line; do
                local id=$(echo "$line" | cut -d':' -f2)
                
                # Extract project details using more precise parsing
                local project_data=$(echo "$response" | grep -o '{[^}]*"id":'$id'[^}]*}')
                local name=$(echo "$project_data" | grep -o '"name":"[^"]*"' | cut -d'"' -f4)
                local customer=$(echo "$project_data" | grep -o '"customer":[0-9]*' | cut -d':' -f2)
                local visible=$(echo "$project_data" | grep -o '"visible":[a-z]*' | cut -d':' -f2)
                local parent_title=$(echo "$project_data" | grep -o '"parentTitle":"[^"]*"' | cut -d'"' -f4)
                
                echo "  ID: $id"
                if [ -n "$name" ]; then
                    echo "    Name: $name"
                fi
                if [ -n "$parent_title" ]; then
                    echo "    Customer: $parent_title"
                fi
                if [ -n "$visible" ]; then
                    echo "    Visible: $visible"
                fi
                echo ""
            done
        else
            print_warning "No projects found"
        fi
    else
        print_error "Failed to fetch projects"
        print_error "curl error: $response"
        exit 1
    fi
}

# Function to list activities
list_activities() {
    local auth_token="$1"
    
    print_status "Fetching activities..."
    
    local response=$(curl --silent --show-error \
        --request GET \
        --url "$KIMAI_URL/api/activities" \
        --header "Accept: application/json" \
        --header "Authorization: Bearer $auth_token" \
        2>&1)
    
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        # Try to extract activity information
        local activity_count=$(echo "$response" | grep -o '"id":[0-9]*' | wc -l)
        
        if [ "$activity_count" -gt 0 ]; then
            print_status "Found $activity_count activity(ies):"
            echo ""
            
            # Extract and display activity details using better parsing
            echo "$response" | grep -o '"id":[0-9]*' | while read -r line; do
                local id=$(echo "$line" | cut -d':' -f2)
                
                # Extract activity details using more precise parsing
                local activity_data=$(echo "$response" | grep -o '{[^}]*"id":'$id'[^}]*}')
                local name=$(echo "$activity_data" | grep -o '"name":"[^"]*"' | cut -d'"' -f4)
                local project=$(echo "$activity_data" | grep -o '"project":[0-9]*' | cut -d':' -f2)
                local visible=$(echo "$activity_data" | grep -o '"visible":[a-z]*' | cut -d':' -f2)
                local parent_title=$(echo "$activity_data" | grep -o '"parentTitle":"[^"]*"' | cut -d'"' -f4)
                
                echo "  ID: $id"
                if [ -n "$name" ]; then
                    echo "    Name: $name"
                fi
                if [ -n "$project" ]; then
                    echo "    Project ID: $project"
                fi
                if [ -n "$parent_title" ]; then
                    echo "    Project Name: $parent_title"
                fi
                if [ -n "$visible" ]; then
                    echo "    Visible: $visible"
                fi
                echo ""
            done
        else
            print_warning "No activities found"
        fi
    else
        print_error "Failed to fetch activities"
        print_error "curl error: $response"
        exit 1
    fi
}

# Function to show current status
show_status() {
    local auth_token="$1"
    
    print_status "Current Kimai Status"
    echo ""
    
    # Check if there are active timesheets
    local response=$(curl --silent --show-error \
        --request GET \
        --url "$KIMAI_URL/api/timesheets?active=1" \
        --header "Accept: application/json" \
        --header "Authorization: Bearer $auth_token" \
        2>&1)
    
    local active_count=$(echo "$response" | grep -o '"id":[0-9]*' | wc -l)
    
    if [ "$active_count" -gt 0 ]; then
        print_warning "You have $active_count active timesheet(s) running"
        echo ""
        list_active_timesheets "$auth_token"
    else
        print_success "No active timesheets"
    fi
}

# Function to parse start command arguments
parse_start_arguments() {
    local project_id=""
    local activity_id=""
    local description=""
    local tags=""
    local billable="true"
    local exported="false"
    
    shift  # Remove 'start' command
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --project-id)
                project_id="$2"
                shift 2
                ;;
            --activity-id)
                activity_id="$2"
                shift 2
                ;;
            --description)
                description="$2"
                shift 2
                ;;
            --tags)
                tags="$2"
                shift 2
                ;;
            --billable)
                billable="true"
                shift
                ;;
            --exported)
                exported="true"
                shift
                ;;
            *)
                print_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # Validate required arguments
    if [ -z "$project_id" ]; then
        print_error "Project ID is required"
        show_usage
        exit 1
    fi
    
    if [ -z "$activity_id" ]; then
        print_error "Activity ID is required"
        show_usage
        exit 1
    fi
    
    # Validate that IDs are numbers
    if ! [[ "$project_id" =~ ^[0-9]+$ ]]; then
        print_error "Project ID must be a number"
        exit 1
    fi
    
    if ! [[ "$activity_id" =~ ^[0-9]+$ ]]; then
        print_error "Activity ID must be a number"
        exit 1
    fi
    
    # Return values
    echo "$project_id|$activity_id|$description|$tags|$billable|$exported"
}

# Function to parse end command arguments
parse_end_arguments() {
    local timesheet_id=""
    
    shift  # Remove 'end' command
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --timesheet-id)
                timesheet_id="$2"
                shift 2
                ;;
            *)
                print_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # Validate required arguments
    if [ -z "$timesheet_id" ]; then
        print_error "Timesheet ID is required"
        show_usage
        exit 1
    fi
    
    # Validate that ID is a number
    if ! [[ "$timesheet_id" =~ ^[0-9]+$ ]]; then
        print_error "Timesheet ID must be a number"
        exit 1
    fi
    
    echo "$timesheet_id"
}

# Main execution
main() {
    print_status "Kimai Timesheet Management Script"
    echo ""
    
    # Check dependencies
    check_dependencies
    
    # Get authentication token
    print_status "Retrieving authentication token..."
    local auth_token=$(get_auth_token)
    
    # Parse command
    local command="${1:-help}"
    
    case $command in
        start)
            local args=$(parse_start_arguments "$@")
            IFS='|' read -r project_id activity_id description tags billable exported <<< "$args"
            start_timesheet "$auth_token" "$project_id" "$activity_id" "$description" "$tags" "$billable" "$exported"
            ;;
        end)
            local timesheet_id=$(parse_end_arguments "$@")
            stop_timesheet "$auth_token" "$timesheet_id"
            ;;
        list)
            list_active_timesheets "$auth_token"
            ;;
        projects)
            list_projects "$auth_token"
            ;;
        activities)
            list_activities "$auth_token"
            ;;
        status)
            show_status "$auth_token"
            ;;
        help|--help|-h)
            show_usage
            ;;
        *)
            print_error "Unknown command: $command"
            show_usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@" 