#!/bin/bash

# Email synchronization script using isync
# This script manages synchronization of all email accounts

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
MBSYNCRC="$HOME/.mbsyncrc"
MAIL_DIR="$HOME/.mail"
LOG_DIR="$HOME/.cache/isync"

# Create necessary directories
mkdir -p "$MAIL_DIR"
mkdir -p "$LOG_DIR"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if isync is installed
check_isync() {
    if ! command -v mbsync &> /dev/null; then
        print_error "isync (mbsync) is not installed. Please install it first:"
        echo "  Arch: sudo pacman -S isync"
        echo "  Debian/Ubuntu: sudo apt install isync"
        exit 1
    fi
}

# Function to setup initial configuration
setup_config() {
    print_status "Setting up isync configuration..."
    
    if [ ! -f "$MBSYNCRC" ]; then
        if [ -f "$HOME/workspace/dots/config/isync/mbsyncrc" ]; then
            cp "$HOME/workspace/dots/config/isync/mbsyncrc" "$MBSYNCRC"
            print_success "Configuration copied to $MBSYNCRC"
        else
            print_error "Configuration file not found at $HOME/workspace/dots/config/isync/mbsyncrc"
            exit 1
        fi
    else
        print_warning "Configuration already exists at $MBSYNCRC"
        # Update the configuration if it exists
        if [ -f "$HOME/workspace/dots/config/isync/mbsyncrc" ]; then
            cp "$HOME/workspace/dots/config/isync/mbsyncrc" "$MBSYNCRC"
            print_success "Configuration updated at $MBSYNCRC"
        fi
    fi
    
    # Set proper permissions
    chmod 600 "$MBSYNCRC"
    
    # Create all necessary maildir directories
    print_status "Creating maildir directories..."
    for account in boogienet gmail macapinlac; do
        mkdir -p "$MAIL_DIR/$account"
        print_success "Created $MAIL_DIR/$account"
    done
    
    print_success "Configuration setup complete"
}

# Function to perform initial sync
initial_sync() {
    print_status "Performing initial synchronization..."
    print_warning "This may take a while depending on your mailbox sizes"
    
    # Sync all accounts
    mbsync -a 2>&1 | tee "$LOG_DIR/initial_sync.log"
    
    if [ $? -eq 0 ]; then
        print_success "Initial synchronization completed successfully"
        print_status "Check $LOG_DIR/initial_sync.log for details"
    else
        print_error "Initial synchronization failed"
        print_status "Check $LOG_DIR/initial_sync.log for error details"
        exit 1
    fi
}

# Function to sync specific account
sync_account() {
    local account=$1
    local dry_run=${2:-false}
    
    if [ "$dry_run" = "true" ]; then
        print_status "Performing dry-run sync for account: $account"
        mbsync -n "$account" 2>&1 | tee "$LOG_DIR/${account}_dryrun.log"
    else
        print_status "Synchronizing account: $account"
        mbsync "$account" 2>&1 | tee "$LOG_DIR/${account}_sync.log"
    fi
    
    if [ $? -eq 0 ]; then
        if [ "$dry_run" = "true" ]; then
            print_success "Dry-run completed for $account"
        else
            print_success "Synchronization completed for $account"
        fi
    else
        if [ "$dry_run" = "true" ]; then
            print_error "Dry-run failed for $account"
        else
            print_error "Synchronization failed for $account"
        fi
        print_status "Check $LOG_DIR/${account}_*.log for error details"
    fi
}

# Function to sync all accounts
sync_all() {
    local dry_run=${1:-false}
    
    if [ "$dry_run" = "true" ]; then
        print_status "Performing dry-run sync for all accounts..."
        mbsync -n -a 2>&1 | tee "$LOG_DIR/dryrun_$(date +%Y%m%d_%H%M%S).log"
    else
        print_status "Synchronizing all accounts..."
        mbsync -a 2>&1 | tee "$LOG_DIR/sync_$(date +%Y%m%d_%H%M%S).log"
    fi
    
    if [ $? -eq 0 ]; then
        if [ "$dry_run" = "true" ]; then
            print_success "Dry-run completed for all accounts"
        else
            print_success "All accounts synchronized successfully"
        fi
    else
        if [ "$dry_run" = "true" ]; then
            print_error "Dry-run failed for some accounts"
        else
            print_error "Synchronization failed for some accounts"
        fi
        print_status "Check $LOG_DIR/ for log files"
    fi
}

# Function to show sync status with more details
show_status() {
    print_status "Checking synchronization status..."
    
    for account in boogienet gmail macapinlac; do
        if [ -d "$MAIL_DIR/$account" ]; then
            local count=$(find "$MAIL_DIR/$account" -name "*.eml" | wc -l)
            local size=$(du -sh "$MAIL_DIR/$account" 2>/dev/null | cut -f1)
            local last_sync=""
            
            # Check for last sync log
            if [ -f "$LOG_DIR/${account}_sync.log" ]; then
                last_sync=$(stat -c %y "$LOG_DIR/${account}_sync.log" 2>/dev/null | cut -d' ' -f1,2 | cut -d'.' -f1)
            fi
            
            if [ -n "$last_sync" ]; then
                print_success "$account: $count messages (${size}) - Last sync: $last_sync"
            else
                print_success "$account: $count messages (${size}) - No sync log found"
            fi
        else
            print_warning "$account: Not synchronized yet"
        fi
    done
}

# Function to perform dry-run sync
dry_run() {
    local account=${1:-all}
    
    if [ "$account" = "all" ]; then
        sync_all "true"
    else
        sync_account "$account" "true"
    fi
}

# Function to show sync statistics
show_stats() {
    print_status "Sync statistics..."
    
    echo ""
    echo "=== Account Statistics ==="
    for account in boogienet gmail macapinlac; do
        if [ -d "$MAIL_DIR/$account" ]; then
            echo ""
            echo "📧 $account:"
            
            # Count messages by folder
            for folder in INBOX "Sent Items" "[Gmail]/Sent Mail" "[Gmail]/Drafts" "[Gmail]/Trash" "[Gmail]/All Mail" "[Gmail]/Spam" "Drafts" "Trash" "Spam"; do
                if [ -d "$MAIL_DIR/$account/$folder" ]; then
                    local count=$(find "$MAIL_DIR/$account/$folder" -name "*.eml" 2>/dev/null | wc -l)
                    if [ $count -gt 0 ]; then
                        echo "  📁 $folder: $count messages"
                    fi
                fi
            done
            
            # Total size
            local size=$(du -sh "$MAIL_DIR/$account" 2>/dev/null | cut -f1)
            echo "  💾 Total size: $size"
        fi
    done
    
    echo ""
    echo "=== Recent Sync Logs ==="
    ls -lt "$LOG_DIR"/*.log 2>/dev/null | head -10 | while read line; do
        echo "  📄 $line"
    done
}

# Function to show help
show_help() {
    echo "Email synchronization script using isync"
    echo ""
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  setup     - Setup initial configuration"
    echo "  init      - Perform initial synchronization (downloads all mail)"
    echo "  sync      - Synchronize all accounts (incremental)"
    echo "  dry-run   - Show what would be synced without actually syncing"
    echo "  boogienet - Synchronize boogienet account only"
    echo "  gmail     - Synchronize gmail account only"
    echo "  macapinlac- Synchronize macapinlac account only"
    echo "  status    - Show synchronization status"
    echo "  stats     - Show detailed sync statistics"
    echo "  help      - Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 setup    # First time setup"
    echo "  $0 init     # Initial sync (download all mail)"
    echo "  $0 sync     # Regular incremental sync"
    echo "  $0 dry-run  # See what would be synced"
    echo "  $0 gmail    # Sync only Gmail"
    echo "  $0 stats    # Show detailed statistics"
    echo ""
    echo "Incremental Sync Features:"
    echo "  • Only syncs changes since last sync"
    echo "  • Fast updates (seconds, not minutes)"
    echo "  • Preserves local changes"
    echo "  • Two-way synchronization"
}

# Main script logic
main() {
    check_isync
    
    case "${1:-help}" in
        setup)
            setup_config
            ;;
        init)
            setup_config
            initial_sync
            ;;
        sync)
            sync_all
            ;;
        dry-run)
            if [ -n "$2" ]; then
                dry_run "$2"
            else
                dry_run "all"
            fi
            ;;
        boogienet|gmail|macapinlac)
            sync_account "$1"
            ;;
        status)
            show_status
            ;;
        stats)
            show_stats
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            print_error "Unknown command: $1"
            show_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@" 